import {
    Controller,
    Post,
    Body,
    Get,
    Patch,
    Param,
    UseGuards,
    ParseIntPipe, Delete,
} from '@nestjs/common';
import {AuthGuard} from '@nestjs/passport';
import {RolesGuard} from '../auth/roles.guard';
import {Roles} from '../auth/roles.decorator';
import {InjectRepository} from '@nestjs/typeorm';
import {Repository} from 'typeorm';
import {User, UserRole} from '../users/user.entity';
import {randomUUID} from 'crypto';
import * as bcrypt from 'bcryptjs';

@Controller('admin')
@UseGuards(AuthGuard('jwt'), RolesGuard)

export class AdminController {
    constructor(
        @InjectRepository(User)
        private userRepo: Repository<User>,
    ) {
    }

    @Post('create-user')
    @Roles(UserRole.Admin, UserRole.TeamLead)
    async createUser(
        @Body() body: { email: string; password?: string; role: UserRole }
    ) {
        const exists = await this.userRepo.findOne({where: {email: body.email}});
        if (exists) return {message: 'User already exists'};

        const plainPassword = body.password || randomUUID().slice(0, 8); // üîê fallback
        const hashedPassword = await bcrypt.hash(plainPassword, 10);     // üîê hash it

        const user = this.userRepo.create({
            email: body.email,
            password: hashedPassword,
            role: body.role,
        });

        await this.userRepo.save(user);

        return {
            message: `User created with role ${body.role}`,
            ...(body.password ? {} : {temporaryPassword: plainPassword}) // return if autogenerated
        };
    }

    @Get('users')
    @Roles(UserRole.Admin, UserRole.TeamLead)
    async listUsers() {
        return await this.userRepo.find({
            select: ['id', 'email', 'role'], // Don‚Äôt expose password
        });
    }

    @Patch('user/:id/role')
    @Roles(UserRole.Admin, UserRole.TeamLead)
    async updateUserRole(
        @Param('id', ParseIntPipe) id: number,
        @Body() body: { role: UserRole }
    ) {
        const user = await this.userRepo.findOne({where: {id}});
        if (!user) return {message: 'User not found'};

        user.role = body.role;
        await this.userRepo.save(user);

        return {message: `User ${user.email} role updated to ${body.role}`};
    }

    @Delete('user/:id')
    @Roles(UserRole.Admin, UserRole.TeamLead)
    async deleteUser(@Param('id', ParseIntPipe) id: number) {
        const result = await this.userRepo.delete(id);
        if (result.affected === 0) return {message: 'User not found or already deleted'};
        return {message: `User ${id} deleted`};
    }
}

